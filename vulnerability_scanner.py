import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin
import re


class VulnerabilityScanner:
    def __init__(self, full_target_url, ignore_links_list=""):
        self.session = requests.Session()
        self.target_url = full_target_url
        self.ignore_links = ignore_links_list
        self.target_links = []

    def run(self, url=None):
        if url is None:
            url = self.target_url

        response = self.session.get(url=url, timeout=3)

        if response.status_code == 200:
            response_text = response.text
            self.get_links(response_text)
        else:
            pass

    def get_links(self, html):
        links_list = re.findall('(?:href=")(.*?)"', html)
        self.crawl(links_list)

    def get_forms(self, url):
        forms_response = self.session.get(url)
        parsed_html = BeautifulSoup(forms_response.text, features="lxml")
        return parsed_html.findAll("form")

    def submit_form(self, form, value, url):
        form_action = form.get("action")
        form_method = form.get("method")
        post_url = urljoin(url, form_action)

        form_inputs_list = form.findAll("input")
        post_data_list = {}
        for form_input in form_inputs_list:
            form_input_name = form_input.get("name")
            form_input_type = form_input.get("type")
            form_input_value = form_input.get("value")
            if form_input_type == "text":
                form_input_value = value

            post_data_list[form_input_name] = form_input_value

        if form_method == "post":
            return self.session.post(post_url, data=post_data_list)
        return self.session.get(post_url, params=post_data_list)

    def crawl(self, links_list):
        for link in links_list:
            link = urljoin(self.target_url, link)

            if "#" in link:
                link = link.split("#")[0]

            if self.target_url in link and link not in self.target_links and link not in self.ignore_links:
                self.target_links.append(link)
                print(link)
                self.run(link)

    def run_scanner(self):
        for link in self.target_links:
            forms = self.get_forms(link)
            for form in forms:
                is_vulnerable_to_xss = self.test_xss_in_forms(form, link)
                if is_vulnerable_to_xss:
                    print("\n\n[!] XSS vulnerability found in form: " + link + "\n")
                    print(form)
                    print("\n\n")

            if "=" in link:
                is_vulnerable_to_xss = self.test_xss_in_links(link)
                if is_vulnerable_to_xss:
                    print("\n\n[!] XSS vulnerability found in link: " + link + "\n")

    def test_xss_in_forms(self, form, url):
        xss_test_script = '<script>alert("test")</script>'
        response = self.submit_form(form, xss_test_script, url)
        return xss_test_script in response.text

    def test_xss_in_links(self, url):
        xss_test_script = '<script>alert("test")</script>'
        url = url.replace("=", "=" + xss_test_script)
        response = self.session.get(url)
        return xss_test_script in response.text


# If the target url requires authentication:
data_dict = {"username": "[USERNAME]", "password": "[PASSWORD]", "[SUBMIT BUTTON NAME]": "[SUBMIT BUTTON VALUE]"}
links_to_ignore = ["[LINKS]"]  # Eg: logout link
scanner = VulnerabilityScanner(full_target_url="[Target URL]", ignore_links_list=links_to_ignore)
scanner.session.post(url="[URL asking for authentication]", data=data_dict)

# If the target url requires no authentication:
# scanner = VulnerabilityScanner(full_target_url="[Target URL]")  

print("[+] Mapping website\n")
scanner.run()
print("\n\n[+] Testing for vulnerabilities")
scanner.run_scanner()
